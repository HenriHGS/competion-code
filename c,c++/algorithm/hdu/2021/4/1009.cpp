#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <queue>
#define pb push_back
#define mp make_pair
#define For(i,x,y) for(int i = (x); i <= (y); i ++ )
#define fori(i,x,y) for(int i = (x); i < (y); i ++ )
using namespace std;
typedef pair<int,int>pa;
const int dx[] = {0,0,1,-1,1,-1,-1,1};
const int dy[] = {1,-1,0,0,1,1,-1,-1};
int cas;
const int N = 31*110+1000;
char g[31][110];
int vis[N];
bool visited[N];
int f[N];
int l[N], r[N];
int find(int x){
    if(x == f[x]) return x;
    return f[x] = find(f[x]);
}
int id(int x, int y){
    return (x-1)*100 + y;
}
void init(){
    For(i,1,30)For(j,1,100){
        f[id(i,j)] = id(i,j);
        l[id(i,j)] = r[id(i,j)] = j;
        visited[id(i,j)] = vis[id(i,j)] = 0;
    }
    For(i,1,30)scanf("%s", g[i]+1);
}
bool in(int x, int y){
    bool ok = x>=1&&x<=30&&y>=1&&y<=100&&g[x][y] == '#';
    return ok;
}
void bfs(int i, int j){
    queue<pa>que;
    que.push({i,j});
    while(!que.empty()){
        i = que.front().first, j = que.front().second;
        visited[id(i,j)] = 1;
        que.pop();
        
    }
}
void cal(){
    For(i,1,30)For(j,1,100){
        if(g[i][j] == '.')continue;
        //bfs(i,j);
        fori(k,0,8){
            int ii = i + dx[k];
            int jj = j + dy[k];
            int ind1 = id(i,j);
            int ind2 = id(ii,jj);
            if(!in(ii,jj))continue;// || visited[id(ii,jj)
            int A = find(ind1);
            int B = find(ind2);
            if(A==B)continue;
            f[B] = f[A];
        }
        visited[id(i,j)] = 1;
    }
    vector<pa>ans;
    For(i,1,30)For(j,1,100){
        int ind = id(i,j);
        int anc = find(ind);
    }
    For(i,1,30)For(j,1,100){
        int ind = id(i,j);
        int anc = find(ind);
        l[anc] = min(l[anc],j);
        r[anc] = max(r[anc],j);
    }
    For(i,1,30)For(j,1,100){
        if(g[i][j] == '.') continue;
        int ind = id(i,j);
        int anc = find(ind);
        if(vis[anc])continue;
        vis[anc] = 1;
        ans.pb({l[anc],r[anc]});
    }
    sort(ans.begin(),ans.end(),[&](pa a, pa b){
        if(a.first == b.first) return a.second > b.second;
        return a.first < b.first;
    });
    int l = 0, r = 0;
    bool chinese = 0;
    fori(i,0,ans.size()){
        int ll = ans[i].first, rr = ans[i].second;
        if(l <= ll && rr <= r)continue;
        else if(ll > r + 1){
            if(l == r && l == 0){
                l = ll, r = rr;
            }
            else if(r - l + 1 <= 13 && !chinese){
                l = min(l,ll);
                r = max(r,rr);
            }else{
                if(r-l+1>1)printf("%d %d\n", l, r);
                chinese = 1;
                l = ll, r = rr;
            }
        }else {
            l = min(l,ll);
            r = max(r,rr);
        }
        //printf("%d %d\n",ans[i].first, ans[i].second);//cout<<ans[i].first<<' '<<ans[i].second<<endl;
    }
    printf("%d %d\n", l, r);
   // cout<<ans.size()<<endl;
}
void sol(){
    init();
    printf("Case #%d:\n",++cas);
    cal();
}
char s[1000];
int main(){
    /*
    scanf("%s", s);
    printf("%d\n", strlen(s));
    */
    int tt;
    scanf("%d", &tt);
    while(tt--){
       // if(cas)puts("");
        sol();
    }
    
    return 0;
}
/*
....................................................................................................
....................................................................................................
....................................................................................................
..............##............#.......#.............#..##..##......#############.........#.....#......
...............##............##.#########....######..####..#.........#...#.........###############..
........###############.......#.....#...#........##..#######......#..#...#..#..........#.....#......
....................................#...#....####.#...............##.#...#..#.......#############...
..........###########......#...###########.....###########.........#.#...#.#........#...........#...
..........#.........#......##.......#...#......#....#....#...........#...#..........#.#########.#...
..........#.........#.......##......#...#......###########......###############.....................
..........#.........#........#..#########......#....#....#..........................#############...
..........###########...............#..........###########........###########..........###....#.....
...............#..............#.#########........#.....#..........#.........#.......###..##..###....
...........#...#...#.........#......#.........#############.......#.........#......#...##.###.......
..........##...#...##........#......#............#.....#..........###########......#.##..###.#......
..........#....#....##......##.###########...###############......#.........#.......#...##.#..#.....
.........#.....#.....#......#.......#...........###...####........#.........#........####..#...##...
........#...####.....##....##.......#........###..........##......###########......##....##.....##..
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................

....................................................................................................
....................................................................................................
....................................................................................................
........#..........#........#.......#.............#..##..##......#############......#..........#....
........#....#.....#.........##.#########....######..####..#.........#...#..........#....#.....#....
........#....#.....#..........#.....#...#........##..#######......#..#...#..#.......#....#.....#....
........#....#.....#................#...#....####.#...............##.#...#..#.......#....#.....#....
........#....#.....#.......#...###########.....###########.........#.#...#.#........#....#.....#....
........#....#.....#.......##.......#...#......#....#....#...........#...#..........#....#.....#....
........#....#.....#........##......#...#......###########......###############.....#....#.....#....
........#....#.....#.........#..#########......#....#....#..........................#....#.....#....
........#....#.....#................#..........###########........###########.......#....#.....#....
........#....#.....#..........#.#########........#.....#..........#.........#.......#....#.....#....
.......##....#.....#.........#......#.........#############.......#.........#......##....#.....#....
.......#.....#.....#.........#......#............#.....#..........###########......#.....#.....#....
.......#.....#.....#........##.###########...###############......#.........#......#.....#.....#....
......##.....#.....#........#.......#...........###...####........#.........#.....##.....#.....#....
......#......#.....#.......##.......#........###..........##......###########.....#............#....
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
*/